---
# --------------------------------

- name: 'added some directories under /usr/local'
  file:
    path: '{{item}}'
    state: directory
    owner: root
    group: root
    mode: 0755
  loop: ['/usr/local/bin', '/usr/local/etc', '/usr/local/etc/bash.d']
  become: true
  tags:
  - ct-docker
  - ct-docker-scripts

- name: 'copy bash include file over'
  copy:
    src: docker.sh
    dest: /usr/local/etc/bash.d
    owner: root
    group: root
    mode: 0644
  become: true
  tags:
  - ct-docker
  - ct-docker-scripts

- name: 'copy convenience scripts over'
  copy:
    src: '{{item}}'
    dest: /usr/local/bin
    owner: root
    group: root
    mode: '0755'
  loop:
  - dbuild.sh
  - drac.sh
  - drdi.sh
  - drun.sh
  become: true
  tags:
  - ct-docker
  - ct-docker-scripts

- name: 'grab some packages so we can install the repo key'
  apt:
    name: '{{docker_pkg_dependencies}}'
    state: present
  become: true
  tags:
  - ct-docker
  - ct-docker-pkg

- name: 'add docker repo key'
  apt_key:
    url: 'https://download.docker.com/linux/ubuntu/gpg'
    validate_certs: true
    state: present
  become: true
  tags:
  - ct-docker
  - ct-docker-repo

- name: 'add docker repository to APT'
  apt_repository:
    filename: docker
    repo: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ct_codename}} stable'
    state: present
    update_cache: false
  register: reg_docker_repo
  become: true
  tags:
  - ct-docker
  - ct-docker-repo

- name: 'update apt cache and install docker packages'
  apt:
    name: '{{docker_pkg_names}}'
    update_cache: '{{reg_docker_repo is changed}}'
    state: '{{docker_pkg_state}}'
  become: true
  tags:
  - ct-docker
  - ct-docker-pkg

- name: 'add users to docker role'
  user:
    name: '{{item}}'
    append: true
    groups: 'docker'
  loop: '{{docker_users}}'
  become: true
  tags:
  - ct-docker
  - ct-docker-user

- name: 'render logrotate config'
  template:
    src: logrotate.j2
    dest: /etc/logrotate.d/{{item.filename}}
    owner: root
    group: root
    mode: '0644'
  vars:
    lr_count: '{{item.count}}'
    lr_path: '{{item.path}}'
    lr_size: '{{item.size}}'
  loop: '{{docker_logrotation}}'
  become: true
  tags:
  - ct-docker
  - ct-docker-hkp

- name: 'start and enable docker service'
  service:
    name: docker
    enabled: '{{docker_svc_enabled}}'
    state: '{{docker_svc_state}}'
  become: true
  tags:
  - ct-docker
  - ct-docker-svc

# --------------------------------
# optional Docker Swarm set up

- name: 'get local IP (assumes AWS host)'
  command: curl http://169.254.169.254/latest/meta-data/local-ipv4
  when:
  - docker_swarm_mode == 'master'
  - (ct_cloud|default('foo')) == 'aws'
  register: reg_ip
  check_mode: false
  become: true
  tags:
  - ct-docker
  - ct-docker-swarm

- name: 'generate docker swarm key'
  shell: docker swarm init  --advertise-addr {{reg_ip.stdout_lines[0]}} | grep 'docker swarm join ' > {{docker_swarm_tmpfile}}
  args:
    creates: '{{docker_swarm_tmpfile}}'
  when: docker_swarm_mode == 'master'
  become: true
  tags:
  - ct-docker
  - ct-docker-swarm

- name: 'fetch swarm file'
  fetch:
    src: '{{docker_swarm_tmpfile}}'
    dest: /tmp/
    flat: true
  when: docker_swarm_mode == 'master'
  become: true
  tags:
  - ct-docker
  - ct-docker-swarm

- name: 'load docker swarm command'
  command: cat {{docker_swarm_tmpfile}}
  when: docker_swarm_mode == 'minion'
  register: reg_join_command
  changed_when: false
  delegate_to: localhost
  tags:
  - ct-docker
  - ct-docker-swarm

- name: 'tell minion to join swarm'
  shell: '{{reg_join_command.stdout_lines[0]}}'
  when: docker_swarm_mode == 'minion'
  register: reg_join
  failed_when: (reg_join.rc|int > 0) and ('This node is already part of a swarm' not in reg_join.stderr)
  become: true
  ignore_errors: '{{ansible_check_mode}}'
  # changed_when: TODO
  tags:
  - ct-docker
  - ct-docker-swarm

# --------------------------------
...
